testing = adData[-inTrain,]
str(training)
str(training[c(1,56:63)])
str(training[c(1,58:66)])
str(training[c(1,58:67)])
str(training[c(1,58:68)])
str(training[c(1,58:70)])
str(training[c(1,58:69)])
train_subset <- training[c(1,58:69),]
pred1 <- train(diagnosis ~ ., method = "glm", data = train_subset)
pred1 <- train(diagnosis ~ IL_11, method = "glm", data = train_subset)
pred1 <- train(diagnosis ~ IL_11, method = "lm", data = train_subset)
pred1 <- train(diagnosis ~ IL_11, method = "glm", data = train_subset)
library(caret)
pred1 <- train(diagnosis ~ IL_11, method = "glm", data = train_subset)
install.packages("e1071", dependencies = TRUE)
pred1 <- train(diagnosis ~ IL_11, method = "glm", data = train_subset)
pred1 <- train(diagnosis ~ ., method = "glm", data = train_subset)
confusionMatrix(pred1)
warnings()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
inTrain
training <- adData[inTrain,]
testing <- adData[-inTrain,]
str(training)
str(training[c(diagnosis,grepl("IL_"))])
train_subset <- training[c(1,58:69)]
head(train_subset)
train_subset <- training[c(1,58:69),]
head(train_subset)
train_subset <- training[c(1,58:69)]
pred1 <- train(diagnosis ~ ., method = "glm", data = train_subset)
confusionMatrix(pred1)
head(train_subset)
head(training)
confusionMatrix(pred1)
help(createDataPartition)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength,p = 3/4)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
qplot(seq_along(mixtures$CompressiveStrength),mixtures$CompressiveStrength,colour=mixtures$Cement)
str(mixtures)
? qplot
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=Cement,data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=BlastFurnaceSlag,data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=FlyAsh,data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(FlyAsh),data=mixtures)
library(Hmisc)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(FlyAsh),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(Cement),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=Cut2(BlastFurnaceSlag),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(BlastFurnaceSlag),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(Water),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(SuperPlastizer),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(SuperPlasticizer),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(Superplasticizer),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(CourseAggregate),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(CoarseAggregate),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(FineAggregate),data=mixtures)
qplot(seq_along(mixtures$CompressiveStrength),CompressiveStrength,colour=cut2(Age),data=mixtures)
library(AppliedPredictiveModeling)
data("concrete")
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength,p = 3/4)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
qplot(log(mixtures$Superplasticizer)
)
qplot(mixtures$Superplasticizer)
library(caret)
rm()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis,p = 3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
name(training)
names(training)
names(training)[grepl("IL")]
help("grepl")
grep("IL",names(training))
grep("^IL",names(training))
names(training)[grep("^IL",names(training))]
help preProcess
? preProcess
IL_cols <- grep("^IL",names(training))
head(training[IL_cols,])
head(training[IL_cols])
preProc <- preProcess(training[,IL_cols],method="pca")
preProc
preProc <- preProcess(training[,IL_cols],method="pca",thresh = 0.9)
preProc
subTraining <- training[c(1,IL_cols)]
head(subTraining)
rm()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
subTraining <- training[c(1,IL_cols)]
head(subTraining)
subTesting <- testing[c(1,IL_cols)]
pred1 <- train(diagnosis ~ ., method = "glm", data = subTraining)
test1 <- predict(pred1, subTesting)
confusionMatrix(subTesting$diagnosis,pred1)
confusionMatrix(subTesting$diagnosis,test1)
preProc <- preProcess(subTesting[,IL_cols],method="pca",thresh=0.8)
preProc <- preProcess(subTraining[IL_cols],method="pca",thresh=0.8)
preProc <- preProcess(subTraining[,-1],method="pca",thresh=0.8)
trainPC <- predict(preProc,subTraining[,-1])
pred2 <- train(subTraining$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, subTesting[,-1])
confusionMatrix(subTesting$diagnosis,testPC)
confusionMatrix(subTesting$diagnosis,predict(pred2,testPC))
q()
data("iris")
library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~ ., method = "rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Class Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
plot(modFit$finalModel, uniform=TRUE, main="Class Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.5)
install.packages("rattle")
library(rattle)
q()
data("iris")
library(ggplot2)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain.]
testing <- iris[-inTrain,]
modFit <- train(Species~., data=training, method="rf", prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
library(ISLR)
data("Wage")
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage~., method="gbm", data=training, verbose=FALSE)
modFit <- train(wage~., method="gbm", data=training, verbose=FALSE)
warnings()
print(modFit)
qplot(predict(modFit,testing), wage, data=testing)
data("iris")
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
modlda <- train(Species~., data=training, method="lda")
modnb <- train(Species~., data=training, method="nb")
version(caret)
version()
version
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
inTrain = createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
CART <- train(Case~., data=training, method="rpart")
str(segmentationOriginal)
testA <- training[0,]
head(testA)
testA[1,"TotalIntenCh2"] <- 23000
testA[1,"FiberWidthCh1"] <- 10
testA[1,"PerimStatusCh1"] <- 2
predict(CART,testA)
testA
predict(CART$finalModel,testA)
predict(CART$finalModel,testing)
arg(predict)
args(predict)
help("predict")
predict(CART$finalModel,newdate=testA)
predict(CART$finalModel,newdate=testA)$Case
pred <- predict(CART$finalModel,newdate=testA)
str(pred)
CART
levels(training$Case)
levels(segmentationOriginal$Case)
str(segmentationOriginal)
training <- segmentationOriginal[Case="Train"]
training <- segmentationOriginal[Case="Train",]
training <- segmentationOriginal[,Case="Train"]
training <- segmentationOriginal[segmentationOriginal$Case="Train"]
training <- segmentationOriginal[segmentationOriginal$Case == "Train"]
training <- segmentationOriginal[segmentationOriginal$Case = "Train"]
training <- segmentationOriginal[segmentationOriginal$Case = "Train",]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
head(training)
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
head(testing)
head(testing)[1:5]
set.seed(125)
CART <- train(Class~., data=training, method="rpart")
testA <- training[0,]
testA[1,"TotalIntenCh2"] <- 23000
testA[1,"FiberWidthCh1"] <- 10
testA[1,"PerimStatusCh1"] <- 2
pred <- predict(CART$finalModel,newdata = =testA)
pred <- predict(CART$finalModel,newdata = testA)
pred <- predict(CART,newdata = testA)
pred
pred[1]
testA
testA[1,Case] <- "Test"
testA
testA[1,"Case"] <- "Test"
pred <- predict(CART,newdata = testA)
pred[1]
testA <- training[1]
testA[1,"TotalIntenCh2"] <- 23000
testA[1,"FiberWidthCh1"] <- 10
testA[1,"PerimStatusCh1"] <- 2
pred <- predict(CART,newdata = testA)
head(testA)
testA <- training[1,]
head(testA)
testA[1,"TotalIntenCh2"] <- 23000
testA[1,"FiberWidthCh1"] <- 10
testA[1,"PerimStatusCh1"] <- 2
pred <- predict(CART,newdata = testA)
pred[1]
testA[1,"TotalIntenCh2"] <- 50000
testA[1,"VarIntenCh4"] <- 100
pred <- predict(CART,newdata = testA)
pred[1]
testA[1,"TotalIntenCh2"] <- 57000
testA[1,"FiberWidthCh1"] <- 8
pred <- predict(CART,newdata = testA)
pred[1]
testA[1,"FiberWidthCh1"] <- 8
testA[1,"PerimStatusCh1"] <- 2
testA[1,"PerimStatusCh1"] <- 2
pred <- predict(CART,newdata = testA)
pred[1]
testA <- testing[0,]
testA[1,"TotalIntenCh2"] <- 23000
testA[1,"FiberWidthCh1"] <- 10
testA[1,"PerimStatusCh1"] <- 2
pred <- predict(CART,newdata = testA)
pred[1]
pred <- predict(CART$finalModel,newdata = testA)
pred <- predict(CART,newdata = testA)
CART <- rpart(Class~. data=training)
CART <- rpart(Class~., data=training)
set.seed(125)
CART <- rpart(Class~., data=training)
CART
testA <- training[0,]
testA[1,"TotalIntenCh2"] <- 23000
testA[1,"FiberWidthCh1"] <- 10
testA[1,"PerimStatusCh1"] <- 2
predict(CART, testA, type="prob")
predict(CART, testA)
testB <- training[0,]
testB[1,"TotalIntenCh2"] <- 50000
testB[1,"FiberWidthCh1"] <- 10
testB[1,"VarIntenCh4"] <- 100
predict(CART, testB)
testC <- training[0,]
testB[1,"TotalIntenCh2"] <- 57000
testB[1,"FiberWidthCh1"] <- 8
testB[1,"VarIntenCh4"] <- 100
testC[1,"TotalIntenCh2"] <- 50000
testC[1,"FiberWidthCh1"] <- 8
testC[1,"VarIntenCh4"] <- 100
predict(CART, testB)
testD <- training[0,]
testD[1,"FiberWidthCh1"] <- 8
testC[1,"VarIntenCh4"] <- 100
testD[1,"VarIntenCh4"] <- 100
testD[1,"PerimStatusCh1"] <- 2
predict(CART, testD)
testC <- training[0,]
testC[1,"TotalIntenCh2"] <- 57000
testD[1,"FiberWidthCh1"] <- 8
testC[1,"FiberWidthCh1"] <- 8
testC[1,"VarIntenCh4"] <- 100
predict(CART, testC)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
head(olive)
olive <- olive[,-1]
head(olive)
newdata <- as.data.frame(t(colMeans(olive)))
modOlive <- train(Area~., method="rpart", data=olive)
predict(modOlive, newdata)
library(ElemStatLearn)
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
str(testing)
str(trainSA)
set.seed(13234)
modSA <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
predictTrainSA <- predict(modSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predictTrainSA)
missClass(testSA$chd,predictTrainSA)
predictTestSA <- predict(modSA,testSA)
missClass(testSA$chd,predictTestSA)
data("vowel.train")
data("vowel.test")
vowel.train[,"y"] <- factor()
str(vowel.train)
vowel.test[,"y"] <- factor()
set.seed(33833)
data("vowel.test")
head(vowel.test)
str(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.test)
data("vowel.train")
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
set.seed(33833)
modVowel <- train(y~., method="rf", data=vowel.train)
varImp(modVowel)
help("varImp")
rm()
library(ElemStatLearn)
data("vowel.train")
data("vowel.test")
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modVowel <- train(y~., data=vowel.train, method="rf")
res <- predict(modVowel, vowel.test)
varImp(modVowel)
modVowel <- train(y~., data=vowel.train, method="rf")
varImp(modVowel)
q()
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.package("rmarkdown")
install.packages("rmarkdown")
library(parallel)
library(doParallel)
install.packages("doParallel")
library(doParallel)
cluster <- makeCluster(detectCores()-1)
registerDoParallel(cluster)
fitControl <- trainControl(method="cv", number=10, allowParallel=TRUE)
library(caret)
fitControl <- trainControl(method="cv", number=10, allowParallel=TRUE)
library(mlbench)
data(Sonar)
set.seed(95014)
inTraining <- createDataPartition(Sonar$Class, p = .75, list=FALSE)
training <- Sonar[inTraining,].
training <- Sonar[inTraining,]
testing <- Sonar[-inTraining,]
x <- training[,-61]
y <- training[,61]
fit <- train(x,y,method="rf",data=Sonar, trControl=fitControl)
stopCluster(cluster)
confusionMatrix(fit)
str(pmlTraining[1:15])
pmlTraining <- read.csv("pml-training.csv",stringsAsFactors = FALSE)
setwd("c:/Users/short/Documents/R/PML Assignment")
pmlTraining <- read.csv("pml-training.csv",stringsAsFactors = FALSE)
pmlTesting <- read.csv("pml-testing.csv",stringsAsFactors = FALSE)
dim(pmlTraining)
str(pmlTraining[1:15])
colsToInclude <- c(roll_belt,pitch_belt)
colsToInclude <- c("roll_belt","pitch_belt")
head(pmlTraining[colsToInclude])
str(pmlTraining[1:15])
pmlTraining[total_accell_belt]
pmlTraining["total_accell_belt"]
pmlTraining[,"total_accell_belt"]
pmlTraining["total_accel_belt"]
pmlTraining["total_accel_belt"]
pmlTraining$total_accel_belt <- as.factor(total_accel_belt)
pmlTraining$total_accel_belt <- as.factor(pmlTrainingtotal_accel_belt)
pmlTraining$total_accel_belt <- as.factor(pmlTraining$total_accel_belt)
str(pmlTraining[1:15])
levels(pmlTraining$total_accel_belt)
subset(pmlTraining$kurtosis_roll_belt,pmlTraining$kurtosis_roll_belt != "")
subset(pmlTraining,pmlTraining$kurtosis_roll_belt != "")
subset(pmlTraining,pmlTraining$kurtosis_roll_belt != "")[5:15]
str(pmlTraining[1:15])
str(pmlTraining[16:30])
str(pmlTraining[31:45])
str(pmlTraining[46:60])
str(pmlTraining[61:75])
str(pmlTraining[76:90])
str(pmlTraining[91:105])
str(pmlTraining[106:120])
str(pmlTraining[121:135])
str(pmlTraining[136:150])
str(pmlTraining[151:165])
str(pmlTraining[151:160])
colsToInclude <- c("classe",roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y"","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z","roll_arm","pitch_arm","yaw_arm","gyros_arm_x","gyros_arm_y","gyros_arm_z","accel_arm_x","accel_arm_y"","accel_arm_z","magnet_arm_x","magnet_arm_y","magnet_arm_z","roll_dumbell","pitch_dumbell","yaw_dumbell","total_accel_dumbell","gyros_dumbell_x","gyros_dumbell_y","gyros_dumbell_z","accel_dumbell_x","accel_dumbell_y"","accel_dumbell_z","magnet_dumbell_x","magnet_dumbell_y","magnet_dumbell_z","roll_forearm","pitch_forearm","yaw_forearm","total_accel_forearm","gyros_forearm_x","gyros_forearm_y","gyros_forearm_z","accel_forearm_x","accel_forearm_y"","accel_forearm_z","magnet_forearm_x","magnet_forearm_y","magnet_forearm_z")
colsToInclude <- c("classe",roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y"","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z","roll_arm","pitch_arm","yaw_arm","gyros_arm_x","gyros_arm_y","gyros_arm_z","accel_arm_x","accel_arm_y"","accel_arm_z","magnet_arm_x","magnet_arm_y","magnet_arm_z")
colsToInclude <- c("classe","roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y"","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z","roll_arm","pitch_arm","yaw_arm","gyros_arm_x","gyros_arm_y","gyros_arm_z","accel_arm_x","accel_arm_y"","accel_arm_z","magnet_arm_x","magnet_arm_y","magnet_arm_z","roll_dumbell","pitch_dumbell","yaw_dumbell","total_accel_dumbell","gyros_dumbell_x","gyros_dumbell_y","gyros_dumbell_z","accel_dumbell_x","accel_dumbell_y"","accel_dumbell_z","magnet_dumbell_x","magnet_dumbell_y","magnet_dumbell_z","roll_forearm","pitch_forearm","yaw_forearm","total_accel_forearm","gyros_forearm_x","gyros_forearm_y","gyros_forearm_z","accel_forearm_x","accel_forearm_y"","accel_forearm_z","magnet_forearm_x","magnet_forearm_y","magnet_forearm_z")
colsToInclude <- c("classe","roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y"","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z")
colsToInclude <- c("classe","roll_belt","pitch_belt","yaw_belt")
colsToInclude <- c("classe","roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z")
colsToInclude <- c("classe","roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y"","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z")
colsToInclude <- c("classe","roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z")
colsToInclude <- c("classe","roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z","roll_arm","pitch_arm","yaw_arm","gyros_arm_x","gyros_arm_y","gyros_arm_z","accel_arm_x","accel_arm_y"","accel_arm_z","magnet_arm_x","magnet_arm_y","magnet_arm_z","roll_dumbell","pitch_dumbell","yaw_dumbell","total_accel_dumbell","gyros_dumbell_x","gyros_dumbell_y","gyros_dumbell_z","accel_dumbell_x","accel_dumbell_y"","accel_dumbell_z","magnet_dumbell_x","magnet_dumbell_y","magnet_dumbell_z","roll_forearm","pitch_forearm","yaw_forearm","total_accel_forearm","gyros_forearm_x","gyros_forearm_y","gyros_forearm_z","accel_forearm_x","accel_forearm_y"","accel_forearm_z","magnet_forearm_x","magnet_forearm_y","magnet_forearm_z")
beltCols <- c("roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z")
armCols <- c("roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z")
beltCols <- c("roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z")
armCols <- c("roll_arm","pitch_arm","yaw_arm","total_accel_arm","gyros_arm_x","gyros_arm_y","gyros_arm_z","accel_arm_x","accel_arm_y","accel_arm_z","magnet_arm_x","magnet_arm_y","magnet_arm_z")
dumbellCols <- c("roll_dumbell","pitch_dumbell","yaw_dumbell","total_accel_dumbell","gyros_dumbell_x","gyros_dumbell_y","gyros_dumbell_z","accel_dumbell_x","accel_dumbell_y","accel_dumbell_z","magnet_dumbell_x","magnet_dumbell_y","magnet_dumbell_z")
forearmCols <- c("roll_forearm","pitch_forearm","yaw_forearm","total_accel_forearm","gyros_forearm_x","gyros_forearm_y","gyros_forearm_z","accel_forearm_x","accel_forearm_y","accel_forearm_z","magnet_forearm_x","magnet_forearm_y","magnet_forearm_z")
colsToInclude <- c("class",beltCols,armCols,dumbellCols,forearmCols)
head(pmlTraining[colsToInclude])
beltCols <- c("roll_belt","pitch_belt","yaw_belt","total_accel_belt","gyros_belt_x","gyros_belt_y","gyros_belt_z","accel_belt_x","accel_belt_y","accel_belt_z","magnet_belt_x","magnet_belt_y","magnet_belt_z")
armCols <- c("roll_arm","pitch_arm","yaw_arm","total_accel_arm","gyros_arm_x","gyros_arm_y","gyros_arm_z","accel_arm_x","accel_arm_y","accel_arm_z","magnet_arm_x","magnet_arm_y","magnet_arm_z")
dumbellCols <- c("roll_dumbell","pitch_dumbell","yaw_dumbell","total_accel_dumbell","gyros_dumbell_x","gyros_dumbell_y","gyros_dumbell_z","accel_dumbell_x","accel_dumbell_y","accel_dumbell_z","magnet_dumbell_x","magnet_dumbell_y","magnet_dumbell_z")
forearmCols <- c("roll_forearm","pitch_forearm","yaw_forearm","total_accel_forearm","gyros_forearm_x","gyros_forearm_y","gyros_forearm_z","accel_forearm_x","accel_forearm_y","accel_forearm_z","magnet_forearm_x","magnet_forearm_y","magnet_forearm_z")
colsToInclude <- c("classe",beltCols,armCols,dumbellCols,forearmCols)
head(pmlTraining[colsToInclude])
head(pmlTraining[beltCols])
head(pmlTraining[armCols])
head(pmlTraining[dumbellCols])
dumbellCols
pmlTraining["roll_dumbell"]
str(pmlTraining)
dumbellCols <- c("roll_dumbell","pitch_dumbell","yaw_dumbell","total_accel_dumbell","gyros_dumbell_x","gyros_dumbell_y","gyros_dumbell_z","accel_dumbell_x","accel_dumbell_y","accel_dumbell_z","magnet_dumbell_x","magnet_dumbell_y","magnet_dumbell_z")
dumbbellCols <- c("roll_dumbbell","pitch_dumbbell","yaw_dumbbell","total_accel_dumbbell","gyros_dumbbell_x","gyros_dumbbell_y","gyros_dumbbell_z","accel_dumbbell_x","accel_dumbbell_y","accel_dumbbell_z","magnet_dumbbell_x","magnet_dumbbell_y","magnet_dumbbell_z")
head(pmlTraining[dumbbellCols])
colsToInclude <- c("class",beltCols,armCols,dumbbellCols,forearmCols)
head(pmlTraining[colsToInclude])
head(pmlTraining[forearmCols])
colsToInclude <- c("classe",beltCols,armCols,dumbbellCols,forearmCols)
head(pmlTraining[colsToInclude])
dim(pmlTraining[colsToInclude])
pmlTraining_subset <- pmlTraining[colsToInclude]
rfFit <- train(classe~.,data=pmTraining_subset,model="rf")
rfFit <- train(classe~.,data=pmlTraining_subset,model="rf")
rfFitControl <- trainControl(method="cv",number=10)
rfFit <- train(classe~.,data=pmlTraining_subset,model="rf",trControl=rfFitControl)
fit <- train(x,y,method="rf",data=Sonar, trControl=fitControl)
rfFitControl <- trainControl(method="cv",number=10, parallel=FALSE)
rfFitControl <- trainControl(method="cv",number=10, allowParallel=FALSE)
rfFit <- train(classe~.,data=pmlTraining_subset,model="rf",trControl=rfFitControl)
rfFitControl <- trainControl(method="cv",number=10, allowParallel=TRUE)
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1)
detectCores()
registerDoParallel(cluster)
rfFitControl <- trainControl(method="cv",number=10, allowParallel=TRUE)
rfFit <- train(classe~magnet_forearm_z,data=pmlTraining_subset,model="rf",trControl=rfFitControl)
rfFit <- train(classe~beltCols,data=pmlTraining_subset,model="rf",trControl=rfFitControl)
rfFit <- train(classe~.,data=pmlTraining_subset,model="rf",trControl=rfFitControl)
rfFit
pmlTraining_subset <- pmlTraining[colsToInclude]
training <- createDataPartition(pmlTraining,p=0)
inTrain <- createDataPartition(pmlTraining$classe,p=0.7,list=FALSE)
trainingSet <- pmlTraining_subset[inTrain,]
testingSet <- pmlTraining_subset[-inTrain,inTrain]
testingSet <- pmlTraining_subset[-inTrain,]
rfFit <- train(classe~.,data=trainingSet,model="rf",trControl=rfFitControl)
rfPred <- predict(rfFit, newdata = testingSet)
confusionMatrix(testingSet$classe, rfPred)
confusionMatrix(testingSet$classe, rfPred)$table
confusionMatrix(testingSet$classe, rfPred)$accuracy
str(confusionMatrix)
?confusionMatrix
confusionMatrix(testingSet$classe, rfPred)$overall
confusionMatrix(testingSet$classe, rfPred)$overall[1]
q()
